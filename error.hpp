////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 Dimitry Ishenko
// Contact: dimitry (dot) ishenko (at) (gee) mail (dot) com
//
// Distributed under the GNU GPL license. See the LICENSE.md file for details.

////////////////////////////////////////////////////////////////////////////////
#ifndef POSIX_ERROR_HPP
#define POSIX_ERROR_HPP

////////////////////////////////////////////////////////////////////////////////
#include <cerrno>
#include <string>
#include <system_error>

////////////////////////////////////////////////////////////////////////////////
namespace posix
{

////////////////////////////////////////////////////////////////////////////////
// While std::errc enum represents an error_condition,
// its enumerator values match up with POSIX errors,
// so it can be reused as an error_code enum and be registered as such.
//
using errc = std::errc;

////////////////////////////////////////////////////////////////////////////////
inline std::error_code make_error_code(errc c)
{
    return std::error_code(static_cast<int>(c), std::system_category());
}

////////////////////////////////////////////////////////////////////////////////
}

////////////////////////////////////////////////////////////////////////////////
namespace std
{

// register posix::errc as an error_code enum
template<>
struct is_error_code_enum<posix::errc> : public true_type { };

}

////////////////////////////////////////////////////////////////////////////////
namespace posix
{

////////////////////////////////////////////////////////////////////////////////
// Convenience class to generate system_error from errno.
//
class errno_error : public std::system_error
{
    auto errc() { return static_cast<posix::errc>(errno < 0 ? -errno : errno); }

public:
    ////////////////////
    explicit errno_error(const std::string& msg) : std::system_error(errc(), msg) { }
    explicit errno_error(const char* msg) : std::system_error(errc(), msg) { }
    errno_error() : std::system_error(errc()) { }
};

////////////////////////////////////////////////////////////////////////////////
}

////////////////////////////////////////////////////////////////////////////////
#endif
